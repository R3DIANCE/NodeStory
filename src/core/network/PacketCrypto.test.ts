import * as PacketCrypto from "./PacketCrypto";

const encryptedLoginResponseWithHeader = [
  0xd5,
  0xfd,
  0xc9,
  0xfd,
  0x70,
  0xae,
  0x68,
  0x47,
  0xe0,
  0xff,
  0xcf,
  0x3e,
  0x7b,
  0x42,
  0x0e,
  0x78,
  0xed,
  0x0d,
  0x2f,
  0x3d,
  0x86,
  0x82,
  0xce,
  0xe7,
  0x52,
  0x52,
  0x84,
  0x6d,
  0x9a,
  0x90,
  0xc7,
  0x1f,
];

const encryptedLoginResponse = [
  0x83,
  0xc5,
  0x4c,
  0x6c,
  0x0a,
  0x1a,
  0x8d,
  0x37,
  0x96,
  0x25,
  0xa2,
  0x84,
  0x57,
  0xa1,
  0x50,
  0x7f,
  0xed,
  0x89,
  0x45,
  0xcd,
  0x5f,
  0x7e,
  0xc3,
  0xf3,
  0x9d,
  0xe8,
  0x51,
  0x05,
];

const decryptedLoginResponse = [
  0x01,
  0x00,
  0x04,
  0x00,
  0x74,
  0x65,
  0x73,
  0x74,
  0x08,
  0x00,
  0x70,
  0x61,
  0x73,
  0x73,
  0x77,
  0x6f,
  0x72,
  0x64,
  0x00,
  0x00,
  0x00,
  0x00,
  0x00,
  0x00,
  0xa9,
  0x62,
  0x95,
  0x9a,
];

const iv = new Uint8Array([0xff, 0x7d, 0x60, 0xf6]);

test("packet length should return 28", () => {
  const header = Buffer.from(encryptedLoginResponseWithHeader.slice(0, 4));
  const len = PacketCrypto.getPacketLength(header);

  expect(len).toBe(28);
});

test("packet should encrypt properly", () => {
  const block = Buffer.from(decryptedLoginResponse);
  const data = PacketCrypto.encryptData(block, iv);

  expect(data.toJSON().data).toEqual(encryptedLoginResponse);
});

test("packet should decrypt properly", () => {
  const block = Buffer.from(encryptedLoginResponse);
  const data = PacketCrypto.decryptData(block, iv);

  expect(data.toJSON().data).toEqual(decryptedLoginResponse);
});
